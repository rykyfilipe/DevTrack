generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  role         UserRole

  projects     Project[]
  Task         Task[]
  TeamMember   TeamMember[]
  Notification Notification[]
  ActivityLog  ActivityLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String @id @default(uuid())
  name        String
  description String

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  status      ProjectStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Task        Task[]
  Team        Team[]
  ActivityLog ActivityLog[]
}

model Task {
  id          String @id @default(uuid())
  title       String
  description String

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assignedToId String
  assignedTo   User   @relation(fields: [assignedToId], references: [id])

  priority Priority
  status   TaskStatus
  dueDate  DateTime

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ActivityLog ActivityLog[]
}

model Team {
  id   String @id @default(uuid())
  name String

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  TeamMember TeamMember[]
}

model TeamMember {
  id   String   @id @default(uuid())
  name String
  role TeamRole

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id      String           @id @default(uuid())
  message String
  read    Boolean
  type    NotificationType

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityLog {
  id     String @id @default(uuid())
  action String

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  COMMENT
}

enum UserRole {
  ADMIN
  MEMBER
  VIEWER
}

enum TeamRole {
  LEAD
  DEVELOPER
  TESTER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
